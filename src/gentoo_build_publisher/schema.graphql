scalar DateTime

input BuildInput {
  name: String!
  number: Int!
}

type Package {
   cpv: String!
   repo: String!
   size: Int!
   buildTime: Int!
}

type Build {
  name: String!
  number: Int!
  submitted: DateTime!
  completed: DateTime
  published: Boolean
  pulled: Boolean
  notes: String
  keep: Boolean!
  logs: String
  packages: [String!]
  packagesBuilt: [Package!]
}

type MachineSummary {
  name: String!
  builds: Int
  latestBuild: Build
  publishedBuild: Build
}

enum StatusEnum {
  REMOVED
  CHANGED
  ADDED
}

type Change {
  item: String!
  status: StatusEnum!
}

type DiffStat {
  left: Build!
  right: Build!
  items: [Change!]!
}

type Query {
  build(name: String!, number: Int!): Build
  builds(name: String!): [Build!]!
  diff(left: BuildInput!, right: BuildInput!): DiffStat
  latest(name: String!): Build
  machines: [MachineSummary!]!
  packages(name: String!, number: Int!): [String!]
  searchNotes(name: String!, key: String!): [Build!]!
  working: [Build!]!
}

type Mutation {
  publish(name: String!, number: Int!): MachineSummary
  pull(name: String!, number: Int!): MachineSummary
  scheduleBuild(name: String!): String
  keepBuild(name: String!, number: Int!): Build
  releaseBuild(name: String!, number: Int!): Build
  createNote(name: String!, number: Int!, note: String): Build
}
