scalar DateTime

type Package {
   cpv: String!
   repo: String!
   size: Int!
   buildTime: Int!
}

type Build {
  id: ID!
  machine: String!
  submitted: DateTime!
  completed: DateTime
  published: Boolean
  pulled: Boolean
  notes: String
  keep: Boolean!
  logs: String
  packages: [String!]
  packagesBuilt: [Package!]
}

type MachineSummary {
  name: String!
  buildCount: Int
  builds: [Build!]!
  latestBuild: Build
  publishedBuild: Build
}

enum StatusEnum {
  REMOVED
  CHANGED
  ADDED
}

type Change {
  item: String!
  status: StatusEnum!
}

type DiffStat {
  left: Build!
  right: Build!
  items: [Change!]!
}

type Query {
  build(id: ID!): Build
  builds(name: String!): [Build!]!
  diff(left: ID!, right: ID!): DiffStat
  latest(name: String!): Build
  machines: [MachineSummary!]!
  searchNotes(name: String!, key: String!): [Build!]!
  version: String!
  working: [Build!]!
}

type Mutation {
  publish(id: ID!): MachineSummary
  pull(id: ID!): MachineSummary
  scheduleBuild(name: String!): String
  keepBuild(id: ID!): Build
  releaseBuild(id: ID!): Build
  createNote(id: ID!, note: String): Build
}
